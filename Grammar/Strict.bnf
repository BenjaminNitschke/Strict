file := [implement type '\n'] {member} {method}
member := has variable
variable := Name [type]
method ::= methodcall [returns type] '\n' [methodbody]
methodcall ::= Name ['(' parameters ')']
parameters ::= variable | variable [','] parameters
methodbody ::= {expression '\n'} [return expression '\n']
expression ::= true | false | from | to | Number | Text |
	exp binary exp | unary exp |
	let '=' expression |
	methodcall |
	if expression '\n' expression '\n' [else '\n' expression] |
	for variable in expression to expression '\n' expression |
binary ::= '+' | '-' | '*' | '/' | '%' |
	'<' | '<=' | '>' | '>=' |
	is | is not | and | or
unary ::= '-' | not
let ::= let variable = expression