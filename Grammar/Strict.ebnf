/* should be improved and updated in the future, this is multiple years old now
1. The newline stuff needs to be sorted; it should be defined consistently.
obs: 2. Methodcall should not be part of Method as methodcall does not accept types, whereas Method does.
3. Missing arguments to 'from' and 'to'?
4. Indentation really should be defined using the pseduo-tokens INDENT and DEDENT for it to be correct (see block: It allows any number of tabs).
5. How to assign to array elements?
6. indexer ought to be an optional, trailing part of the expression node.  Otherwise you can't index call results, literals, etc.
*/
LETTER				 := [A-Za-z]
DIGIT					 := [0-9]
NUMBER				 := [0-9]+
ESCAPE				 := '\\'[nrt\]
STRING				 := ["]([^"\\]|ESCAPE)*["]
LF						 := '\n'
TAB						 := '\t'
NAME					 := [A-Za-z]+
PATH					 := NAME ('.' NAME)*
file						= implement* import* member* method*
package					= PATH
type						= NAME ('(' NAME ')')?
member					= 'has' variable LF
variable				= NAME type?
method					= methodname ('(' parameters ')')? type? LF block?
parameters			= parameter (',' parameter)*
parameter				= NAME type?
methodname			= NAME | binary_op | unary_op | conversion
block						= (TAB* expression LF)*
expression			= member | variablecall | binary_exp | unary_exp | methodcall | constant | mutable | if  | for | conversion | assignment | listinit | conditionalif
constant				= 'true' | 'false' | NUMBER | STRING
conversion			= 'from' | 'to'
variablecall		= NAME indexer?
assignment      = 'constant'? 'mutable'? NAME '=' expression
listinit				= '(' variablecall? ',' constant? ',' ')'
indexer					= '(' expression ')'
binary_exp			= expression binary_op expression
unary_exp				= unary_op expression
methodcall			= methodname ('(' arguments ')')?
arguments				= argument (',' argument)*
argument				= expression
if							= 'if' expression LF block ('else' LF block)?
conditionalif		= expression '?' expression 'else' expression
for							= 'for' (reference 'in')? expression LF block
binary_op				= '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' |  'in' | 'is' | 'is' 'not' | 'and' | 'or' | 'xor'
unary_op				= '-' | 'not'
