namespace Strict.Language.Tests;

/// <summary>
/// Helper context to provide a bunch of helper types to make tests work.
/// </summary>
public class TestPackage : Package
{
	public TestPackage() : base(nameof(TestPackage))
	{
		// @formatter:off
		var types = new[] {
			new Type(this, new TypeLines(Base.Any, "is(other) Boolean", "in(other) Any")),
			new Type(this, new TypeLines(Base.Boolean,
				"not Boolean",
				"\tvalue ? false else true",
				"is(other) Boolean",
				"\tvalue is other",
				"and(other) Boolean",
				"\tvalue and other ? true else false",
				"or(other) Boolean",
				"\tvalue or other ? false else true",
				"xor(other) Boolean",
				"\t(value and other) or (not value and not other) ? false else true")),
			new Type(this, new TypeLines(Base.Number,
				"is not(other) Boolean",
				"\tvalue != other",
				"+(other) Number",
				"\tvalue + other",
				"*(other) Number",
				"\tvalue * other",
				"-(other) Number",
				"\tvalue - other",
				"/(other) Number",
				"\tvalue / other",
				"Floor Number",
				"\tvalue - value % 1",
				"%(other) Number",
				"\tvalue % other",
				">(other) Boolean",
				"\tvalue > other",
				"<(other) Boolean",
				"\tvalue < other",
				"^(other) Number",
				"\tvalue ^ other",
				">=(other) Boolean",
				"\tvalue >= other",
				"<=(other) Boolean",
				"\tvalue <= other",
				"to Text",
				"\t\"\" + value")),
			new Type(this, new TypeLines(Base.Range,
				"implement Number",
				"has Start Number",
				"has End Number",
				"Length Number",
				"\tRange(0, 5).Length is 5",
				"\tRange(2, 18).Length is 16",
				"\tEnd - Start")),
			new Type(this, new TypeLines("HasLength", "Length Number")),
			new Type(this, new TypeLines(Base.Mutable,
				"from(any)",
				"from(type)")),
			new Type(this, new TypeLines(Base.Count,
				"implement Number",
				"implement HasLength",
				"implement Mutable",
				"Increment Count",
				"\tCount(5).Increment is 6",
				"\tvalue = value + 1",
				"Floor Number",
				"\tvalue",
				"Length Number",
				"\tnumber.Length")),
			new Type(this, new TypeLines(Base.Character,
				"implement Number",
				"from(number)",
				"\tvalue = number")),
			new Type(this, new TypeLines(Base.List,
				"has elements Generics",
				"Length Number",
				"\tList((1, 2)).Length is 2",
				"\telements.Length",
				"+(other) List",
				"\tvalue + other",
				"+(addElement Generic) List",
				"\t(1, 2, 3) + 4 is (1, 2, 3, 4)",
				"\t(\"Hello\", \"World\") + 5 is (\"Hello\", \"World\", \"5\")",
				"\telements + addElement",
				"-(other) List",
				"\tvalue - other",
				"-(removeElement Generic) List",
				"\telements - removeElement",
				"is(other) Boolean",
				"\tvalue is other",
				"*(other) List",
				"\tvalue * other")),
			new Type(this, new TypeLines(Base.Text,
				"has Characters",
				"from(number)",
				"\tvalue = Character(number)",
				"Run",
				"\tvalue is not \"\"",
				"+(other) Text",
				"\treturn value",
				"digits(number) Numbers",
				"\tif floor(number / 10) is 0",
				"\t\treturn (number % 10)",
				"\telse",
				"\t\treturn digits(floor(number / 10)) + number % 10")),
			new Type(this, new TypeLines(Base.Type, "to Text")),
			new Type(this, new TypeLines(Base.Generic, "from(type)")),
			new Type(this, new TypeLines(Base.Log,
				"has Text",
				"Write(text)",
				"\tText",
				"Write(number)",
				"\tnumber",
				"Write(mutable)",
				"\tmutable")),
			new Type(this, new TypeLines(Base.File,
				"from(text)",
				"Read Text",
				"Write(text)",
				"Delete",
				"Length Number")),
			new Type(this, new TypeLines(Base.Output, "Write(generic)"))
		};
		foreach (var type in types)
			type.ParseMembersAndMethods(null!);
	}
}