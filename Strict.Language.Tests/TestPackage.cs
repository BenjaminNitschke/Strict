namespace Strict.Language.Tests;

/// <summary>
/// Helper context to provide a bunch of helper types to make tests work.
/// </summary>
public class TestPackage : Package
{
	public TestPackage() : base(nameof(TestPackage))
	{
		// @formatter:off
		var types = new[] {
			new Type(this, new TypeLines(Base.Any, "to Type", "to Text", "is(other) Boolean", "not(other) Boolean")),
			new Type(this, new TypeLines(Base.Boolean,
				"not Boolean",
				"\tvalue ? false else true",
				"is(other) Boolean",
				"\tvalue is other",
				"and(other) Boolean",
				"\tvalue and other ? true else false",
				"or(other) Boolean",
				"\tvalue or other ? false else true",
				"xor(other) Boolean",
				"\t(value and other) or (not value and not other) ? false else true")),
			new Type(this, new TypeLines("HasLength", "Length Number")),
			new Type(this, new TypeLines(Base.Number,
				"is not(other) Boolean",
				"\t1 is not 3",
				"\t2 is not 3",
				"\tvalue != other",
				"+(other) Number",
				"\t3 + 4 is 7",
				"\tvalue + other",
				"*(other) Number",
				"\tvalue * other",
				"-(other) Number",
				"\tvalue - other",
				"/(other) Number",
				"\tvalue / other",
				"Floor Number",
				"\tvalue - value % 1",
				"%(other) Number",
				"\tvalue % other",
				">(other) Boolean",
				"\tvalue > other",
				"<(other) Boolean",
				"\tvalue < other",
				"^(other) Number",
				"\tvalue ^ other",
				">=(other) Boolean",
				"\tvalue >= other",
				"<=(other) Boolean",
				"\tvalue <= other",
				"to Text",
				"\t\"\" + value")),
			new Type(this, new TypeLines(Base.Range,
				"has iterator",
				"has Start Number",
				"has End Number",
				"Length Number",
				"\tRange(0, 5).Length is 5",
				"\tRange(2, 18).Length is 16",
				"\tEnd - Start")),
			new Type(this, new TypeLines(Base.Character,
				"has Number",
				"from(number)",
				"\tCharacter(7) is \"7\"",
				"\tCharacter(0) + number",
				"to Number",
				"\tCharacter(\"3\") to Number is 3",
				"\tmutable notANumber = Error",
				"\tCharacter(\"A\") to Number is notANumber",
				"\tconstant result = value - Character(0)",
				"\tresult is in Range(0, 10) ? result else notANumber(value)")),
			new Type(this, new TypeLines(Base.Iterator,
				"for Generic", "in(element Generic) Boolean", "Length Number")),
			new Type(this, new TypeLines(Base.List,
				"has iterator",
				"has elements Generics",
				"Length Number",
				"\t(1, 2).Length is 2",
				"\telements.Length",
				"+(other) List",
				"\t(1, 2, 3) + (4, 5) is (1, 2, 3, 4, 5)",
				"\t(\"Hello\", \"World\") + (1, 2) is (\"Hello\", \"World\", \"1\", \"2\")",
				"\tvalue + other",
				"+(addElement Generic) List",
				"\t(1, 2, 3) + 4 is (1, 2, 3, 4)",
				"\t(\"Hello\", \"World\") + 5 is (\"Hello\", \"World\", \"5\")",
				"\telements + addElement",
				"-(other) List",
				"\t(1, 2, 3) - (3) is (1, 2)",
				"\tvalue - other",
				"-(removeElement Generic) List",
				"\t(1, 2, 3) - 3 is (1, 2)",
				"\t(1, 2, 3) - 4 is (1, 2, 3)",
				"\telements - removeElement",
				"is(other) Boolean",
				"\tvalue is other",
				"*(other) List",
				"\t(1, 2) * (3, 5) is (3, 10)",
				"\tconstant listsHaveDifferentDimensions = Error",
				"\t(1) * (1, 2) is listsHaveDifferentDimensions",
				"\tif Length is not other.Length",
				"\t\tlistsHaveDifferentDimensions",
				"\telements * other.elements",
				"Contains(other Generic) Boolean",
				"\t(\"a\", \"b\", \"c\").Contains(\"d\") is false",
				"\t(\"a\", \"b\", \"c\").Contains(\"b\") is true",
				"\tfor elements",
				"\t\tif value is other",
				"\t\t\treturn true",
				"\treturn false",
				"Index(other Generic) Number",
				"\t(1, 2, 3).Index(2) is 1",
				"\t(1, 2, 3).Index(9) is -1",
				"\tfor elements",
				"\t\tif value is other",
				"\t\t\treturn index",
				"\treturn -1")),
			new Type(this, new TypeLines(Base.Text,
				"has Characters",
				"from(number)",
				"\tvalue = Character(number)",
				"Run",
				"\tvalue is not \"\"",
				"+(other) Text",
				"\treturn value",
				"digits(number) Numbers",
				"\tif floor(number / 10) is 0",
				"\t\treturn (number % 10)",
				"\telse",
				"\t\treturn digits(floor(number / 10)) + number % 10",
				"to Number",
				"\t\"3\" to Number is 3",
				"\tfor Characters.Reverse",
				"\t\t+ value to Number * index ^ 10")),
			new Type(this, new TypeLines(Base.Type, "has Name", "to Text")),
			new Type(this, new TypeLines(Base.Generic, "from(type)")),
			new Type(this, new TypeLines(Base.Log,
				"has output",
				"Write(generic)",
				"\tSystem.WriteLine(generic)")),
			new Type(this, new TypeLines(Base.File,
				"from(text)",
				"Read Text",
				"Write(text)",
				"Delete",
				"Length Number")),
			new Type(this, new TypeLines(Base.Output, "Write(generic)")),
				new Type(this, new TypeLines(Base.Name, "has text(not \" \")")),
			new Type(this, new TypeLines(Base.Method, "has Name", "has Type")),
			new Type(this, new TypeLines(Base.Stacktrace, "has Method", "has FilePath Text", "has Line Number"))
		};
		foreach (var type in types)
			type.ParseMembersAndMethods(null!);
	}
}